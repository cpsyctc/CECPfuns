% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getScoreFromItems.R
\name{getScoreFromItems}
\alias{getScoreFromItems}
\title{Title Function to convert a vector of item responses to a scale/measure score}
\usage{
getScoreFromItems(
  vec,
  scoreAsMean = TRUE,
  propProrateMin = 0.1,
  nProrateMin = NULL,
  k = NULL,
  checkItemScores = FALSE,
  minItemScore = NULL,
  maxItemScore = NULL
)
}
\arguments{
\item{vec}{The item responses/scores}

\item{scoreAsMean}{Score is mean of item scores (as opposed to total/sum score)}

\item{propProrateMin}{Minimum proportion of missing item responses that allows prorating}

\item{nProrateMin}{Minimum number of missing item responses that allows prorating}

\item{k}{Optional check on the number of items}

\item{checkItemScores}{logical, i.e. TRUE or FALSE, which says whether to check the item scores}

\item{minItemScore}{minimum allowed item score}

\item{maxItemScore}{maximum allowed item score}
}
\value{
The required score
}
\description{
Title Function to convert a vector of item responses to a scale/measure score
}
\section{Background}{

This is a very simple function designed to be used in the tidyverse dplyr function to get a single score
from a set of items apply a prorating rule (which may be that prorating is not allowed) and which returns
the mean of the item scores or the mean of those scores.  I have put it here as I kept writing new
functions to do this every time I needed one!  More usefully, I have built in the prorating but perhaps
most usefully of all, I have built in some sanity checks on the inputs and on the item scores.
}

\examples{
\dontrun{
### will need tidyverse to run
library(tidyverse)

### take your data
tibData \%>\%
   ### need to process the data row by row,
   ### hence this rowwise() request
   rowwise() \%>\%
      mutate(score = getScoreFromItems(c_across(item1:item10, # declare items
                                       ### next say that the score that is wanted is mean not sum
                                                scoreAsMean = TRUE,
                                                # now give prorating rule: here up to one missing item,
                                                nProrateMin = 1,
                                                # next the optional check that number of items is correct: here 10
                                                k = 10,
                                                # next ask the function to check the item scores
                                                checkItemScores = TRUE,
                                                # so set the minimum allowed item score: here 0
                                                minItemScore = 0,
                                                # ... and set the maximum allowed score: here 6
                                                maxItemScore = 6)) \%>\%
     ### now we have to shift the data out of the rowwise() grouping:
     ungroup() -> tibDataWithScores

}
}
